<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a="http://richfaces.org/a4j" template="layout/template.xhtml">

	<ui:define name="body">
		<s:remote include="documentoHome"></s:remote>
		<script type="text/javascript">
		 //<![CDATA[
		if(!window.Kolich){
			Kolich = {};
			}
		Kolich.Selector = {};
  		Kolich.Selector.getSelected = function(){
			var t='';
			if(window.getSelection){
				t=window.getSelection();
	  	  	}else if(document.getSelection){
				t=document.getSelection();
	 	  	}else if(document.selection){
				t=document.selection.createRange().text;
	  	  	}
			return t;
  		}

  		Kolich.Selector.mouseup = function(e){
			var st = Kolich.Selector.getSelected();
			if(st!='')
				alert("You selected:\n"+st+"\n"+e.pageX+","+e.pageY);

  	  	}

  		function getCaret(el) { 
  		  if (el.selectionStart) { 
  	  		  alert(el.selectionStart+" "+el.selectionEnd);
  		    return el.selectionStart; 
  		  } else if (document.selection) { 
  		    el.focus(); 

  		    var r = document.selection.createRange(); 
  		    if (r == null) { 
  		      return 0; 
  		    } 

  		    var re = el.createTextRange(), 
  		        rc = re.duplicate(); 
  		    re.moveToBookmark(r.getBookmark()); 
  		    rc.setEndPoint('EndToStart', re); 

  		    return rc.text.length; 
  		  }  
  		  return 0; 
  		}

  		function InsertText() {
  		    var textarea = document.getElementById('documentViewForm:documentTextArea');
  		    var currentPos = getCaret(textarea);
  		    //alert(currentPos);
  		    var strLeft = textarea.value.substring(0,currentPos);
  		    var strMiddle = "-- Hello World --";
  		    var strRight = textarea.value.substring(currentPos,textarea.value.length);
  		    textarea.value = strLeft + strMiddle + strRight;
  		}
  		
  		  function saveSelection() {
  		    if (window.getSelection) {
  		        sel = window.getSelection();
  		        if (sel.getRangeAt ) {
  	  		        if(sel.rangeCount)
  		            	return sel.getRangeAt(0);
  		        }
  		    } else if (document.selection ) {
  	  		    if(document.selection.createRange)
	  		        return document.selection.createRange();
  		    }
  		    return null;
  		}

  		function restoreSelection(range) {
  		    if (range) {
  		        if (window.getSelection) {
  		            sel = window.getSelection();
  		            sel.removeAllRanges();
  		            sel.addRange(range);
  		        } else if (document.selection ) {
  	  		        if(range.select)
	  		            range.select();
  		        }
  		    }
  		}

  		function seleccionarTexto(){
  	  		var seleccion = tinyMCE.activeEditor.selection.getContent({format : 'text'});
  	  		var contexto = tinyMCE.activeEditor.selection.getStart().textContent;
  			alert(seleccion+"#"+tinyMCE.activeEditor.selection.getStart().textContent+"#"+tinyMCE.activeEditor.selection.getBookmark().start+"#"+tinyMCE.activeEditor.selection.getBookmark().end);
  			/*tinyMCE.activeEditor.selection.setContent("&lt;em style='color:#cc0000; text-decoration:underline;' id='error1'&gt;"+seleccion+"&lt;/em&gt;");
  			var span = tinyMCE.activeEditor.dom.get('error1').textContent;
			alert(span);*/
			#{rich:element('errorText')}.value=seleccion;
			#{rich:element('contextoText')}.value=contexto;
			#{rich:element('errorInicio')}.value=tinyMCE.activeEditor.selection.getBookmark().start;
			#{rich:element('errorFin')}.value=tinyMCE.activeEditor.selection.getBookmark().end;
			Richfaces.showModalPanel('pnl');
  	  	}

  	  	function cambiarTexto(){
  	  		var seleccion = tinyMCE.activeEditor.selection.getContent({format : 'text'});
	  		tinyMCE.activeEditor.selection.setContent("<em style='color:#cc0000; text-decoration:underline;' id='error"+#{rich:element('errorFin')}.value+"'>"+seleccion+"</em>");
	  		Richfaces.hideModalPanel('pnl');
  	  	}


  	  	
  	  	
  		function restoreBookmark(){
  			
            Seam.Remoting.getContext().setConversationId(#{conversation.id});
  	  		
            var documento = Seam.Component.getInstance("documentoHome");
  		    documento.getErrores(function(errores){

  		    		for(var i = 0;i < errores.length; i++)
  	  		    		{

  		    			var bm = {start : errores[i].inicio, end: errores[i].fin};
  		    			tinyMCE.activeEditor.selection.moveToBookmark(bm);
  		    			var seleccion = tinyMCE.activeEditor.selection.getContent({format : 'text'});
  		    	  		tinyMCE.activeEditor.selection.setContent("<em style='color:#cc0000; text-decoration:underline;' id='error"+errores[i].id+"'>"+seleccion+"</em>");
 
  	  		    		}
  	  		    
  	  		    });

  		}
  		function tinysetup(){
  		  tinymce.create('tinymce.plugins.ExamplePlugin', {
		        createControl: function(n, cm) {
		                switch (n) {
		                        case 'mymenubutton':
		                                var c = cm.createMenuButton('mymenubutton', {
		                                        title : 'My menu button',
		                                        image : 'img/example.gif',
		                                        icons : false
		                                });

		                                c.onRenderMenu.add(function(c, m) {
		                                        var sub;

		                                        m.add({title : 'Some item 1', onclick : function() {
		                                                tinyMCE.activeEditor.execCommand('mceInsertContent', false, 'Some item 1');
		                                        }});

		                                        m.add({title : 'Some item 2', onclick : function() {
		                                                tinyMCE.activeEditor.execCommand('mceInsertContent', false, 'Some item 2');
		                                        }});

		                                        sub = m.addMenu({title : 'Some item 3'});

		                                        sub.add({title : 'Some item 3.1', onclick : function() {
		                                                tinyMCE.activeEditor.execCommand('mceInsertContent', false, 'Some item 3.1');
		                                        }});

		                                        sub.add({title : 'Some item 3.2', onclick : function() {
		                                                tinyMCE.activeEditor.execCommand('mceInsertContent', false, 'Some item 3.2');
		                                        }});
		                                });

		                                // Return the new menu button instance
		                                return c;
		                }

		                return null;
		        }
		});
  		tinymce.PluginManager.add('example', tinymce.plugins.ExamplePlugin);  	  		
  	  	}

  		function we(){
  	  		alert("we");
  	  		tinyMCE.activeEditor.addButton('example', {
  	         title : 'weeeeee',
  	         onclick : function() {
  	            ed.windowManager.alert('Hello world!! Selection: ' + ed.selection.getContent({format : 'text'}));
  	         }
  	      });
  		}

  	// Creates a new plugin class and a custom listbox
  		

  	   // ]]>
  	  	


  </script>

		<rich:panel>
			<f:facet name="header">documentView</f:facet>

			<h:form id="documentViewForm">
				<rich:panel>
					<f:facet name="header">Documento</f:facet>

					<s:decorate id="nameField" template="layout/edit.xhtml"
						rendered="#{documentoHome.managed}">
						<ui:define name="label">Nombre del Fichero</ui:define>
						<h:outputText id="name"
							value="#{documentoHome.instance.nombreFichero}" />
					</s:decorate>

					<div style="clear: both" />

				</rich:panel>
				<rich:panel>
					<f:facet name="header">Contenido del documento</f:facet>

					<rich:editor id="documentTextArea"
						value="#{documentView.documento}" oninit="restoreBookmark()"
						 theme="advanced" plugins="save,paste,example" onsetup="tinysetup()" >						
						<f:param name="theme_advanced_buttons1"
							value="mymenubutton,bold,italic,underline, cut,copy,paste" />

          <f:param name="theme_advanced_toolbar_location" value="top"/>                               

          <f:param name="theme_advanced_toolbar_align" value="left"/>
						
					</rich:editor>




					<h:selectManyListbox id="listaErrores" styleClass="listaErrores">
						<s:selectItems value="#{documentoHome.errores}" var="_error"
							label="#{_error.error}:#{_error.inicio}-#{_error.fin}">
						</s:selectItems>
						<s:convertEntity></s:convertEntity>
					</h:selectManyListbox>
					<div style="clear: both" />
				</rich:panel>

				<h:commandButton id="documentView" value="documentView!"
					action="#{documentView.documentView}" />

				<a:commandButton action="#{errorHome.create}" value="Weee"
					oncomplete="seleccionarTexto()" />
				<a href="#" onclick="we()">we</a>

			</h:form>

		</rich:panel>
		<rich:jQuery selector="#documentTextArea" timing="onload"
			query="bind('mouseup',Kolich.Selector.mouseup)" rendered="false"></rich:jQuery>

		<a onclick="Richfaces.showModalPanel('pnl');" href="#">Show
			ModalPanel</a>

		<rich:modalPanel id="pnl" autosized="true" width="600">
			<a:form id="form">


				<a onclick="Richfaces.hideModalPanel('pnl');" href="#">Hide
					ModalPanel</a>
				<s:decorate id="contextoDecorate" template="/layout/edit.xhtml">
					<ui:define name="label">Contexto</ui:define>
					<h:inputTextarea id="contextoText"
						value="#{errorHome.instance.contexto}">
						<a:support event="onblur" reRender="contextoDecorate"
							bypassUpdates="true"></a:support>
					</h:inputTextarea>
				</s:decorate>
				<s:decorate template="/layout/edit.xhtml">
					<ui:define name="label">Error</ui:define>
					<h:inputText id="errorText" value="#{errorHome.instance.error}" />
				</s:decorate>
				<h:inputHidden id="errorInicio" value="#{errorHome.instance.inicio}" />
				<h:inputHidden id="errorFin" value="#{errorHome.instance.fin}" />

				<div style="clear: both">

					<a:commandButton id="save" value="Save"
						action="#{errorHome.persist}" rendered="#{!errorHome.managed}"
						oncomplete="if (#{facesContext.maximumSeverity==null}||!#{facesContext.maximumSeverity.ordinal==2}) cambiarTexto();"
						reRender="pnl, ultimoError, listaErrores" />
					<h:commandButton id="update" value="Save"
						action="#{errorHome.update}" rendered="#{errorHome.managed}" />
					<h:commandButton id="delete" value="Delete"
						action="#{errorHome.remove}" immediate="true"
						rendered="#{errorHome.managed}" />
					<a:commandButton id="cancel" value="Cancel" type="reset"
						onclick="Richfaces.hideModalPanel('pnl');" />
				</div>
			</a:form>

		</rich:modalPanel>
		<h:inputHidden id="ultimoError" value="#{errorHome.instance.id}" />
	</ui:define>

</ui:composition>
